<#

.COPYRIGHT
Copyright (c) ECIT Solutions AS. All rights reserved. Licensed under the MIT license.
See https://github.com/ecitsolutions/Autotask/blob/master/LICENSE.md for license information.

#>
Function Import-AtwsCmdLet {
    <#
        .SYNOPSIS
            This function generates and imports Powershell functions tailored to the input.
        .DESCRIPTION
            This function takes custom PSObjects generated by function Get-AtwsFieldInfo and 
            uses them to generate Powershell code for all entities in the input, converts them
            to [ScriptBlock] and imports them in the module.
        .INPUTS
            [PSObject[]]
        .OUTPUTS
            Powershell functions
        .EXAMPLE    
            Import-AtwsCmdLet
            Gets all dynamic entities from Get-AtwsFieldInfo and generates and imports functions
            for them all.
        .NOTES
            NAME: Import-AtwsCmdLet
        .LINK
            Get-AtwsFieldInfo

  #>
    [CmdLetBinding(
        SupportsShouldProcess = $true,
        ConfirmImpact = 'Medium'
    )]
    Param(
        [Hashtable]
        $Entities = $(Get-AtwsFieldInfo -All)
    )
  
    begin { 

        # Enable modern -Debug behavior
        if ($PSCmdlet.MyInvocation.BoundParameters['Debug'].IsPresent) { $DebugPreference = 'Continue' }  
              
        Write-Debug -Message ('{0}: Start of function.' -F $MyInvocation.MyCommand.Name)

        # Prepare parameters for @splatting
        $progressId = 2
        $progressParameters = @{
            Activity = 'Creating and importing functions for all Autotask entities.'
            Id       = $progressId
        }
    
    } 
  
    process {
            
        # Prepare Index for progressbar
        $index = 0
    
        Write-Verbose -Message ('{0}: Creating functions for {1} entities' -F $MyInvocation.MyCommand.Name, $Entities.count) 
        
        foreach ($cacheEntry in $Entities.GetEnumerator()) {
            # EntityInfo()
            $entity = $cacheEntry.Value.EntityInfo
      
            Write-Debug -Message ('{0}: Creating functions for entity {1}' -F $MyInvocation.MyCommand.Name, $entity.Name) 
      
            # Calculating progress percentage and displaying it
            $index++
            $percentComplete = $index / $Entities.Count * 100
      
            # Add parameters for @splatting
            $progressParameters['percentComplete'] = $percentComplete
            $progressParameters['Status'] = 'Entity {0}/{1} ({2:n0}%)' -F $index, $Entities.Count, $percentComplete
            $progressParameters['CurrentOperation'] = 'Importing {0}' -F $entity.Name
      
            Write-AtwsProgress @progressParameters
      
            $caption = $MyInvocation.MyCommand.Name
            $verboseDescription = '{0}: Creating and Invoking functions for entity {1}' -F $caption, $entity.Name
            $verboseWarning = '{0}: About to create and Invoke functions for entity {1}. Do you want to continue?' -F $caption, $entity.Name
       
            $functionDefinition = Get-AtwsDynamicFunctionDefinition -Entity $entity -FieldInfo $cacheEntry.Value.FieldInfo
        
            if ($PSCmdlet.ShouldProcess($verboseDescription, $verboseWarning, $caption)) { 
        
                foreach ($function in $functionDefinition.GetEnumerator()) { 
          
                    # Import the updated function
                    . ([ScriptBlock]::Create($function.Value))
      
                    # Export the module member
                    Export-ModuleMember -Function $function.Key           
                }
            }
        }
        
        if ($progressParameters['CurrentOperation']) { 
            Write-AtwsProgress @progressParameters -Completed
        }        

    }

    end {
        Write-Debug -Message ('{0}: Imported {1} functions' -F $MyInvocation.MyCommand.Name, $index)
    }
}
