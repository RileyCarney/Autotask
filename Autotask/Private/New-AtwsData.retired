<#

    .COPYRIGHT
    Copyright (c) ECIT Solutions AS. All rights reserved. Licensed under the MIT license.
    See https://github.com/ecitsolutions/Autotask/blob/master/LICENSE.md  for license information.

#>

Function New-AtwsData 
{
  [cmdletbinding()]
  [OutputType([Object[]])]
  param
  (
    [Parameter(
        Mandatory = $true,
        Position = 0
    )]
    [PSObject[]]
    $Entity
  )
   
  Begin 
  { 
    # Enable modern -Debug behavior
    if ($PSCmdlet.MyInvocation.BoundParameters['Debug'].IsPresent) {$DebugPreference = 'Continue'}
    
    Write-Debug ('{0}: Begin of function' -F $MyInvocation.MyCommand.Name)
     
    if (-not($Script:Atws.integrationsValue))
    {
      Throw [ApplicationException] 'Not connected to Autotask WebAPI. Connect with Connect-AtwsWebAPI. For help use "get-help Connect-AtwsWebAPI".'
    }

    $endResult = @()
  }
    
  process { 
    Write-Verbose -Message ('{0}: Creating a new object of type Autotask.{1}' -F $MyInvocation.MyCommand.Name, $Entity.Name) 
    
    # create() function can take up to 200 objects at a time
    for ($i = 0; $i -lt $Entity.count; $i += 200) 
    {
      $j = $i + 199
      if ($j -gt ($Entity.count - 1)) 
      {
        $j = $Entity.count - 1
      } 
      Write-Debug -Message ('{0}: Creating chunk from index {1} to index {2}' -F $MyInvocation.MyCommand.Name, $i, $j)        
        
      # the .Create() method takes datetime in local time and correctly 
      # translates to CEST without our assistance. .Update() is not as nice...
        
      $result = $Atws.Create($Entity[$i .. $j])
        
        
      if ($result.Errors.Count -eq 0) 
      {
        # Check for duplicates
        $Duplicates = $result.EntityReturnInfoResults | Where-Object {$_.DuplicateStatus.Found -and -not $_.DuplicateStauts.Ignored}
           
        foreach ($Duplicate in $Duplicates)
        {
          Write-Warning ('{0}: Duplicate found for Object Id {1} on {2}' -F $MyInvocation.MyCommand.Name, $Duplicate.EntityId, $Duplicate.DuplicateStatus.MatchInfo)
        }
          
        # The API documentation explicitly states that you can only use the objects returned 
        # by the .create() function to get the new objects ID.
        # so to return objects with accurately represents what has been created we have to 
        # get them again by id
        # But not all objects support queries, for instance service adjustments
          
        $EntityInfo = Get-AtwsFieldInfo -Entity $result.EntityResultType -EntityInfo
          
        if ($result.EntityResults.Count -gt 0 -and $EntityInfo.CanQuery)
        {
          $newObjectFilter = 'id -eq {0}' -F ($result.EntityResults.Id -join ' -or id -eq ')
                        
          $endResult += Get-AtwsData -Entity $result.Entityresulttype -Filter $newObjectFilter
        }
      }
      else 
      {
        foreach ($AtwsError in $result.Errors) 
        {
          Write-Error -Message $AtwsError.Message
        }
      }
    }
  }
  end {
   
    Write-Debug -Message ('{0}: End of function' -F $MyInvocation.MyCommand.Name) 
    Return $endResult  
  }
}
